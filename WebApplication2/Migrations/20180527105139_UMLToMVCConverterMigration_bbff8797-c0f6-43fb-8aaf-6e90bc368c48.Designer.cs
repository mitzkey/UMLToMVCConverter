// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;
using WebApplication2.Models;

namespace WebApplication2.Migrations
{
    [DbContext(typeof(TestowyZKartki01Context))]
    [Migration("20180527105139_UMLToMVCConverterMigration_bbff8797-c0f6-43fb-8aaf-6e90bc368c48")]
    partial class UMLToMVCConverterMigration_bbff8797c0f643fb8aaf6e90bc368c48
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication2.Models.Adres", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MiejscowoscID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("MiejscowoscID");

                    b.ToTable("Adres");
                });

            modelBuilder.Entity("WebApplication2.Models.BrakujaceWyposazeniePrzystosowanieSali", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BrakujaceWyposazenieID");

                    b.Property<int?>("PrzystosowanieSaliID");

                    b.HasKey("ID");

                    b.HasIndex("BrakujaceWyposazenieID");

                    b.HasIndex("PrzystosowanieSaliID");

                    b.ToTable("BrakujaceWyposazeniePrzystosowanieSali");
                });

            modelBuilder.Entity("WebApplication2.Models.CertyfikowaneKwalifikacjeInstruktor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CertyfikowaneKwalifikacjeID");

                    b.Property<int?>("InstruktorID");

                    b.HasKey("ID");

                    b.HasIndex("CertyfikowaneKwalifikacjeID");

                    b.HasIndex("InstruktorID");

                    b.ToTable("CertyfikowaneKwalifikacjeInstruktor");
                });

            modelBuilder.Entity("WebApplication2.Models.Dyscyplina", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nazwa");

                    b.HasKey("ID");

                    b.ToTable("Dyscyplina");
                });

            modelBuilder.Entity("WebApplication2.Models.DyscyplinaZPoziomem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DyscyplinaID")
                        .IsRequired();

                    b.Property<string>("Nazwa");

                    b.Property<int?>("PoziomZaawansowaniaID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("DyscyplinaID");

                    b.HasIndex("PoziomZaawansowaniaID");

                    b.ToTable("DyscyplinaZPoziomem");
                });

            modelBuilder.Entity("WebApplication2.Models.DzienTygodnia", b =>
                {
                    b.Property<int>("ID");

                    b.Property<int?>("InstruktorID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("InstruktorID");

                    b.ToTable("DzienTygodnia");
                });

            modelBuilder.Entity("WebApplication2.Models.Grafik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Aktualny");

                    b.Property<int?>("Rok");

                    b.Property<string>("Semestr");

                    b.HasKey("ID");

                    b.ToTable("Grafik");
                });

            modelBuilder.Entity("WebApplication2.Models.Instruktor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("Instruktor");
                });

            modelBuilder.Entity("WebApplication2.Models.Kurs", b =>
                {
                    b.Property<string>("Kod")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GrafikID")
                        .IsRequired();

                    b.Property<double?>("KosztTygodniowy");

                    b.HasKey("Kod");

                    b.HasIndex("GrafikID");

                    b.ToTable("Kurs");
                });

            modelBuilder.Entity("WebApplication2.Models.KwalifikacjeUprawnieni", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("KwalifikacjeID");

                    b.Property<int?>("UprawnieniID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("KwalifikacjeID");

                    b.HasIndex("UprawnieniID");

                    b.ToTable("KwalifikacjeUprawnieni");
                });

            modelBuilder.Entity("WebApplication2.Models.Miejscowosc", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Aktualna");

                    b.Property<string>("Nazwa");

                    b.Property<int?>("WojewodztwoMiejscowosciID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("WojewodztwoMiejscowosciID");

                    b.ToTable("Miejscowosc");
                });

            modelBuilder.Entity("WebApplication2.Models.Osoba", b =>
                {
                    b.Property<string>("Pesel")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Pesel");

                    b.ToTable("Osoba");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Osoba");
                });

            modelBuilder.Entity("WebApplication2.Models.PoziomyDyscypliny", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DyscyplinyID")
                        .IsRequired();

                    b.Property<int?>("PoziomyID");

                    b.HasKey("ID");

                    b.HasIndex("DyscyplinyID");

                    b.HasIndex("PoziomyID");

                    b.ToTable("PoziomyDyscypliny");
                });

            modelBuilder.Entity("WebApplication2.Models.PoziomZaawansowania", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nazwa");

                    b.HasKey("ID");

                    b.ToTable("PoziomZaawansowania");
                });

            modelBuilder.Entity("WebApplication2.Models.PrzystosowaneSalePrzeznaczenie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("PrzeznaczenieID");

                    b.Property<int?>("PrzystosowaneSaleID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("PrzeznaczenieID");

                    b.HasIndex("PrzystosowaneSaleID");

                    b.ToTable("PrzystosowaneSalePrzeznaczenie");
                });

            modelBuilder.Entity("WebApplication2.Models.PrzystosowanieSali", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DyscyplinaID")
                        .IsRequired();

                    b.Property<int?>("Pojemnosc");

                    b.Property<int?>("PoziomID")
                        .IsRequired();

                    b.Property<int?>("SalaID")
                        .IsRequired();

                    b.Property<double?>("StawkaZaZajecia");

                    b.HasKey("ID");

                    b.HasIndex("DyscyplinaID");

                    b.HasIndex("PoziomID");

                    b.HasIndex("SalaID");

                    b.ToTable("PrzystosowanieSali");
                });

            modelBuilder.Entity("WebApplication2.Models.Sala", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adres");

                    b.Property<string>("Nazwa");

                    b.HasKey("ID");

                    b.ToTable("Sala");
                });

            modelBuilder.Entity("WebApplication2.Models.StatusWniosku", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("StatusWniosku");
                });

            modelBuilder.Entity("WebApplication2.Models.SzczegolyKwalifikacji", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Certyfikat");

                    b.Property<int?>("DyscyplinaZPoziomemID")
                        .IsRequired();

                    b.Property<int?>("InstruktorID")
                        .IsRequired();

                    b.Property<int?>("Priorytet");

                    b.Property<double?>("StawkaZaZajecia");

                    b.HasKey("ID");

                    b.HasIndex("DyscyplinaZPoziomemID");

                    b.HasIndex("InstruktorID");

                    b.ToTable("SzczegolyKwalifikacji");
                });

            modelBuilder.Entity("WebApplication2.Models.Termin", b =>
                {
                    b.Property<DateTime?>("Dzien");

                    b.Property<DateTime?>("GodzinaRozpoczecia");

                    b.Property<int?>("GrafikID")
                        .IsRequired();

                    b.HasKey("Dzien", "GodzinaRozpoczecia");

                    b.HasIndex("GrafikID");

                    b.ToTable("Termin");
                });

            modelBuilder.Entity("WebApplication2.Models.Wniosek", b =>
                {
                    b.Property<string>("Pesel")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdresDoKorespondencjiID");

                    b.Property<int?>("AdresZameldowaniaID");

                    b.Property<DateTime?>("DataRozpatrzenia");

                    b.Property<DateTime?>("DataZlozenia");

                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.HasKey("Pesel");

                    b.HasIndex("AdresDoKorespondencjiID");

                    b.HasIndex("AdresZameldowaniaID");

                    b.HasIndex("StatusID");

                    b.ToTable("Wniosek");
                });

            modelBuilder.Entity("WebApplication2.Models.Wojewodztwo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Aktualna");

                    b.Property<string>("Nazwa");

                    b.HasKey("ID");

                    b.ToTable("Wojewodztwo");
                });

            modelBuilder.Entity("WebApplication2.Models.WymaganeWyposazenieDyscyplina", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DyscyplinaID");

                    b.Property<int?>("WymaganeWyposazenieID");

                    b.HasKey("ID");

                    b.HasIndex("DyscyplinaID");

                    b.HasIndex("WymaganeWyposazenieID");

                    b.ToTable("WymaganeWyposazenieDyscyplina");
                });

            modelBuilder.Entity("WebApplication2.Models.Wyposażenie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Koszt");

                    b.HasKey("ID");

                    b.ToTable("Wyposażenie");
                });

            modelBuilder.Entity("WebApplication2.Models.Zajecia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("KursKod")
                        .IsRequired();

                    b.Property<int?>("SalaID")
                        .IsRequired();

                    b.Property<DateTime?>("TerminDzien")
                        .IsRequired();

                    b.Property<DateTime?>("TerminGodzinaRozpoczecia")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("KursKod");

                    b.HasIndex("SalaID");

                    b.HasIndex("TerminDzien", "TerminGodzinaRozpoczecia");

                    b.ToTable("Zajecia");
                });

            modelBuilder.Entity("WebApplication2.Models.CzlonekKlubu", b =>
                {
                    b.HasBaseType("WebApplication2.Models.Osoba");

                    b.Property<string>("WniosekPrzyjetyNaPodstawiePesel")
                        .IsRequired();

                    b.HasIndex("WniosekPrzyjetyNaPodstawiePesel")
                        .IsUnique();

                    b.ToTable("CzlonekKlubu");

                    b.HasDiscriminator().HasValue("CzlonekKlubu");
                });

            modelBuilder.Entity("WebApplication2.Models.Adres", b =>
                {
                    b.HasOne("WebApplication2.Models.Miejscowosc", "Miejscowosc")
                        .WithMany()
                        .HasForeignKey("MiejscowoscID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.BrakujaceWyposazeniePrzystosowanieSali", b =>
                {
                    b.HasOne("WebApplication2.Models.Wyposażenie", "BrakujaceWyposazenie")
                        .WithMany()
                        .HasForeignKey("BrakujaceWyposazenieID");

                    b.HasOne("WebApplication2.Models.PrzystosowanieSali")
                        .WithMany("BrakujaceWyposazenie")
                        .HasForeignKey("PrzystosowanieSaliID");
                });

            modelBuilder.Entity("WebApplication2.Models.CertyfikowaneKwalifikacjeInstruktor", b =>
                {
                    b.HasOne("WebApplication2.Models.DyscyplinaZPoziomem", "CertyfikowaneKwalifikacje")
                        .WithMany()
                        .HasForeignKey("CertyfikowaneKwalifikacjeID");

                    b.HasOne("WebApplication2.Models.Instruktor")
                        .WithMany("CertyfikowaneKwalifikacje")
                        .HasForeignKey("InstruktorID");
                });

            modelBuilder.Entity("WebApplication2.Models.DyscyplinaZPoziomem", b =>
                {
                    b.HasOne("WebApplication2.Models.Dyscyplina", "Dyscyplina")
                        .WithMany("DyscyplinaZPoziomem")
                        .HasForeignKey("DyscyplinaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.PoziomZaawansowania", "PoziomZaawansowania")
                        .WithMany("DyscyplinaZPoziomem")
                        .HasForeignKey("PoziomZaawansowaniaID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.DzienTygodnia", b =>
                {
                    b.HasOne("WebApplication2.Models.Instruktor")
                        .WithMany("DniZajec")
                        .HasForeignKey("InstruktorID");
                });

            modelBuilder.Entity("WebApplication2.Models.Kurs", b =>
                {
                    b.HasOne("WebApplication2.Models.Grafik", "Grafik")
                        .WithMany("Kursy")
                        .HasForeignKey("GrafikID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication2.Models.KwalifikacjeUprawnieni", b =>
                {
                    b.HasOne("WebApplication2.Models.DyscyplinaZPoziomem", "Kwalifikacje")
                        .WithMany("Uprawnieni")
                        .HasForeignKey("KwalifikacjeID");

                    b.HasOne("WebApplication2.Models.Instruktor", "Uprawnieni")
                        .WithMany("Kwalifikacje")
                        .HasForeignKey("UprawnieniID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.Miejscowosc", b =>
                {
                    b.HasOne("WebApplication2.Models.Wojewodztwo", "WojewodztwoMiejscowosci")
                        .WithMany("MiejscowoscMiejscowosci")
                        .HasForeignKey("WojewodztwoMiejscowosciID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.PoziomyDyscypliny", b =>
                {
                    b.HasOne("WebApplication2.Models.Dyscyplina", "Dyscypliny")
                        .WithMany("Poziomy")
                        .HasForeignKey("DyscyplinyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.PoziomZaawansowania", "Poziomy")
                        .WithMany("Dyscypliny")
                        .HasForeignKey("PoziomyID");
                });

            modelBuilder.Entity("WebApplication2.Models.PrzystosowaneSalePrzeznaczenie", b =>
                {
                    b.HasOne("WebApplication2.Models.Dyscyplina", "Przeznaczenie")
                        .WithMany("PrzystosowaneSale")
                        .HasForeignKey("PrzeznaczenieID");

                    b.HasOne("WebApplication2.Models.Sala", "PrzystosowaneSale")
                        .WithMany("Przeznaczenie")
                        .HasForeignKey("PrzystosowaneSaleID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.PrzystosowanieSali", b =>
                {
                    b.HasOne("WebApplication2.Models.Dyscyplina", "Dyscyplina")
                        .WithMany("PrzystosowanieSali")
                        .HasForeignKey("DyscyplinaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.PoziomZaawansowania", "Poziom")
                        .WithMany("PrzystosowanieSali")
                        .HasForeignKey("PoziomID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.Sala", "Sala")
                        .WithMany("PrzystosowanieSali")
                        .HasForeignKey("SalaID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.SzczegolyKwalifikacji", b =>
                {
                    b.HasOne("WebApplication2.Models.DyscyplinaZPoziomem", "DyscyplinaZPoziomem")
                        .WithMany("SzczegolyKwalifikacji")
                        .HasForeignKey("DyscyplinaZPoziomemID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.Instruktor", "Instruktor")
                        .WithMany("SzczegolyKwalifikacji")
                        .HasForeignKey("InstruktorID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.Termin", b =>
                {
                    b.HasOne("WebApplication2.Models.Grafik", "Grafik")
                        .WithMany("Terminy")
                        .HasForeignKey("GrafikID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication2.Models.Wniosek", b =>
                {
                    b.HasOne("WebApplication2.Models.Adres", "AdresDoKorespondencji")
                        .WithMany()
                        .HasForeignKey("AdresDoKorespondencjiID");

                    b.HasOne("WebApplication2.Models.Adres", "AdresZameldowania")
                        .WithMany()
                        .HasForeignKey("AdresZameldowaniaID");

                    b.HasOne("WebApplication2.Models.StatusWniosku", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication2.Models.WymaganeWyposazenieDyscyplina", b =>
                {
                    b.HasOne("WebApplication2.Models.Dyscyplina")
                        .WithMany("WymaganeWyposazenie")
                        .HasForeignKey("DyscyplinaID");

                    b.HasOne("WebApplication2.Models.Wyposażenie", "WymaganeWyposazenie")
                        .WithMany()
                        .HasForeignKey("WymaganeWyposazenieID");
                });

            modelBuilder.Entity("WebApplication2.Models.Zajecia", b =>
                {
                    b.HasOne("WebApplication2.Models.Kurs", "Kurs")
                        .WithMany("Zajecia")
                        .HasForeignKey("KursKod")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication2.Models.Sala", "Sala")
                        .WithMany("Zajecia")
                        .HasForeignKey("SalaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.Termin", "Termin")
                        .WithMany("Zajecia")
                        .HasForeignKey("TerminDzien", "TerminGodzinaRozpoczecia")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.CzlonekKlubu", b =>
                {
                    b.HasOne("WebApplication2.Models.Wniosek", "WniosekPrzyjetyNaPodstawie")
                        .WithOne("CzlonekKlubuPrzyjetyNaPodstawie")
                        .HasForeignKey("WebApplication2.Models.CzlonekKlubu", "WniosekPrzyjetyNaPodstawiePesel")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
