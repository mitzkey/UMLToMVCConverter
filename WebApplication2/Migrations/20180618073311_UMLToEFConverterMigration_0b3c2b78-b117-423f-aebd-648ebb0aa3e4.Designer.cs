// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;
using WebApplication2.Models;

namespace WebApplication2.Migrations
{
    [DbContext(typeof(TestowyZKartki01Context))]
    [Migration("20180618073311_UMLToEFConverterMigration_0b3c2b78-b117-423f-aebd-648ebb0aa3e4")]
    partial class UMLToEFConverterMigration_0b3c2b78b117423faebd648ebb0aa3e4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication2.Models.Adres", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("MiejscowoscID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("MiejscowoscID");

                    b.ToTable("AdresSet");
                });

            modelBuilder.Entity("WebApplication2.Models.BrakujaceWyposazeniePrzystosowanieSali", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BrakujaceWyposazenieID");

                    b.Property<int?>("PrzystosowanieSaliID");

                    b.HasKey("ID");

                    b.HasIndex("BrakujaceWyposazenieID");

                    b.HasIndex("PrzystosowanieSaliID");

                    b.ToTable("BrakujaceWyposazeniePrzystosowanieSaliSet");
                });

            modelBuilder.Entity("WebApplication2.Models.CertyfikowaneKwalifikacjeInstruktor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CertyfikowaneKwalifikacjeID");

                    b.Property<int?>("InstruktorID");

                    b.HasKey("ID");

                    b.HasIndex("CertyfikowaneKwalifikacjeID");

                    b.HasIndex("InstruktorID");

                    b.ToTable("CertyfikowaneKwalifikacjeInstruktorSet");
                });

            modelBuilder.Entity("WebApplication2.Models.Dyscyplina", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nazwa")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("DyscyplinaSet");
                });

            modelBuilder.Entity("WebApplication2.Models.DyscyplinaZPoziomem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DyscyplinaID")
                        .IsRequired();

                    b.Property<int?>("PoziomZaawansowaniaID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("DyscyplinaID");

                    b.HasIndex("PoziomZaawansowaniaID");

                    b.ToTable("DyscyplinaZPoziomemSet");
                });

            modelBuilder.Entity("WebApplication2.Models.DzienTygodnia", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("DzienTygodniaSet");
                });

            modelBuilder.Entity("WebApplication2.Models.Grafik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Rok");

                    b.Property<string>("Semestr")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("GrafikSet");
                });

            modelBuilder.Entity("WebApplication2.Models.Instruktor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("InstruktorSet");
                });

            modelBuilder.Entity("WebApplication2.Models.Kurs", b =>
                {
                    b.Property<string>("Kod");

                    b.Property<int?>("GrafikID")
                        .IsRequired();

                    b.HasKey("Kod");

                    b.HasIndex("GrafikID");

                    b.ToTable("KursSet");
                });

            modelBuilder.Entity("WebApplication2.Models.Miejscowosc", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Aktualna");

                    b.Property<string>("Nazwa")
                        .IsRequired();

                    b.Property<int?>("WojewodztwoMiejscowosciID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("WojewodztwoMiejscowosciID");

                    b.ToTable("MiejscowoscSet");
                });

            modelBuilder.Entity("WebApplication2.Models.Osoba", b =>
                {
                    b.Property<string>("Pesel");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Pesel");

                    b.ToTable("OsobaSet");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Osoba");
                });

            modelBuilder.Entity("WebApplication2.Models.PoziomZaawansowania", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nazwa")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("PoziomZaawansowaniaSet");
                });

            modelBuilder.Entity("WebApplication2.Models.PrzystosowanieSali", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DyscyplinaID")
                        .IsRequired();

                    b.Property<int>("Pojemnosc");

                    b.Property<int?>("PoziomID")
                        .IsRequired();

                    b.Property<int?>("SalaID")
                        .IsRequired();

                    b.Property<double>("StawkaZaZajecia");

                    b.HasKey("ID");

                    b.HasIndex("DyscyplinaID");

                    b.HasIndex("PoziomID");

                    b.HasIndex("SalaID");

                    b.ToTable("PrzystosowanieSaliSet");
                });

            modelBuilder.Entity("WebApplication2.Models.Sala", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adres")
                        .IsRequired();

                    b.Property<string>("Nazwa")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("SalaSet");
                });

            modelBuilder.Entity("WebApplication2.Models.StatusWniosku", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("StatusWnioskuSet");
                });

            modelBuilder.Entity("WebApplication2.Models.SzczegolyKwalifikacji", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Certyfikat");

                    b.Property<int?>("DyscyplinaZPoziomemID")
                        .IsRequired();

                    b.Property<int?>("InstruktorID")
                        .IsRequired();

                    b.Property<int>("Priorytet");

                    b.Property<double>("StawkaZaZajecia");

                    b.HasKey("ID");

                    b.HasIndex("DyscyplinaZPoziomemID");

                    b.HasIndex("InstruktorID");

                    b.ToTable("SzczegolyKwalifikacjiSet");
                });

            modelBuilder.Entity("WebApplication2.Models.Termin", b =>
                {
                    b.Property<DateTime>("Dzien");

                    b.Property<DateTime>("GodzinaRozpoczecia");

                    b.Property<int?>("GrafikID")
                        .IsRequired();

                    b.HasKey("Dzien", "GodzinaRozpoczecia");

                    b.HasIndex("GrafikID");

                    b.ToTable("TerminSet");
                });

            modelBuilder.Entity("WebApplication2.Models.Wniosek", b =>
                {
                    b.Property<string>("Pesel");

                    b.Property<int?>("AdresDoKorespondencjiID")
                        .IsRequired();

                    b.Property<int?>("AdresZameldowaniaID")
                        .IsRequired();

                    b.Property<DateTime>("DataRozpatrzenia");

                    b.Property<DateTime>("DataZlozenia");

                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.HasKey("Pesel");

                    b.HasIndex("AdresDoKorespondencjiID")
                        .IsUnique();

                    b.HasIndex("AdresZameldowaniaID")
                        .IsUnique();

                    b.HasIndex("StatusID");

                    b.ToTable("WniosekSet");
                });

            modelBuilder.Entity("WebApplication2.Models.Wojewodztwo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Aktualna");

                    b.Property<string>("Nazwa")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("WojewodztwoSet");
                });

            modelBuilder.Entity("WebApplication2.Models.WymaganeWyposazenieDyscyplina", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DyscyplinaID");

                    b.Property<int?>("WymaganeWyposazenieID");

                    b.HasKey("ID");

                    b.HasIndex("DyscyplinaID");

                    b.HasIndex("WymaganeWyposazenieID");

                    b.ToTable("WymaganeWyposazenieDyscyplinaSet");
                });

            modelBuilder.Entity("WebApplication2.Models.Wyposażenie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Koszt");

                    b.HasKey("ID");

                    b.ToTable("WyposażenieSet");
                });

            modelBuilder.Entity("WebApplication2.Models.Zajecia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("KursKod")
                        .IsRequired();

                    b.Property<int?>("SalaID")
                        .IsRequired();

                    b.Property<DateTime>("TerminDzien");

                    b.Property<DateTime>("TerminGodzinaRozpoczecia");

                    b.HasKey("ID");

                    b.HasIndex("KursKod");

                    b.HasIndex("SalaID");

                    b.HasIndex("TerminDzien", "TerminGodzinaRozpoczecia");

                    b.ToTable("ZajeciaSet");
                });

            modelBuilder.Entity("WebApplication2.Models.CzlonekKlubu", b =>
                {
                    b.HasBaseType("WebApplication2.Models.Osoba");

                    b.Property<string>("WniosekPrzyjetyNaPodstawiePesel")
                        .IsRequired();

                    b.HasIndex("WniosekPrzyjetyNaPodstawiePesel")
                        .IsUnique();

                    b.ToTable("CzlonekKlubu");

                    b.HasDiscriminator().HasValue("CzlonekKlubu");
                });

            modelBuilder.Entity("WebApplication2.Models.Adres", b =>
                {
                    b.HasOne("WebApplication2.Models.Miejscowosc", "Miejscowosc")
                        .WithMany()
                        .HasForeignKey("MiejscowoscID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.BrakujaceWyposazeniePrzystosowanieSali", b =>
                {
                    b.HasOne("WebApplication2.Models.Wyposażenie", "BrakujaceWyposazenie")
                        .WithMany()
                        .HasForeignKey("BrakujaceWyposazenieID");

                    b.HasOne("WebApplication2.Models.PrzystosowanieSali")
                        .WithMany("BrakujaceWyposazenie")
                        .HasForeignKey("PrzystosowanieSaliID");
                });

            modelBuilder.Entity("WebApplication2.Models.CertyfikowaneKwalifikacjeInstruktor", b =>
                {
                    b.HasOne("WebApplication2.Models.DyscyplinaZPoziomem", "CertyfikowaneKwalifikacje")
                        .WithMany()
                        .HasForeignKey("CertyfikowaneKwalifikacjeID");

                    b.HasOne("WebApplication2.Models.Instruktor")
                        .WithMany("CertyfikowaneKwalifikacje")
                        .HasForeignKey("InstruktorID");
                });

            modelBuilder.Entity("WebApplication2.Models.DyscyplinaZPoziomem", b =>
                {
                    b.HasOne("WebApplication2.Models.Dyscyplina", "Dyscyplina")
                        .WithMany("Poziomy")
                        .HasForeignKey("DyscyplinaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.PoziomZaawansowania", "PoziomZaawansowania")
                        .WithMany("Dyscypliny")
                        .HasForeignKey("PoziomZaawansowaniaID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.Kurs", b =>
                {
                    b.HasOne("WebApplication2.Models.Grafik", "Grafik")
                        .WithMany("Kursy")
                        .HasForeignKey("GrafikID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication2.Models.Miejscowosc", b =>
                {
                    b.HasOne("WebApplication2.Models.Wojewodztwo", "WojewodztwoMiejscowosci")
                        .WithMany("MiejscowoscMiejscowosci")
                        .HasForeignKey("WojewodztwoMiejscowosciID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.PrzystosowanieSali", b =>
                {
                    b.HasOne("WebApplication2.Models.Dyscyplina", "Dyscyplina")
                        .WithMany("PrzystosowaneSale")
                        .HasForeignKey("DyscyplinaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.PoziomZaawansowania", "Poziom")
                        .WithMany("PrzystosowanieSali")
                        .HasForeignKey("PoziomID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.Sala", "Sala")
                        .WithMany("Przeznaczenie")
                        .HasForeignKey("SalaID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.SzczegolyKwalifikacji", b =>
                {
                    b.HasOne("WebApplication2.Models.DyscyplinaZPoziomem", "DyscyplinaZPoziomem")
                        .WithMany("Uprawnieni")
                        .HasForeignKey("DyscyplinaZPoziomemID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.Instruktor", "Instruktor")
                        .WithMany("Kwalifikacje")
                        .HasForeignKey("InstruktorID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.Termin", b =>
                {
                    b.HasOne("WebApplication2.Models.Grafik", "Grafik")
                        .WithMany("Terminy")
                        .HasForeignKey("GrafikID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication2.Models.Wniosek", b =>
                {
                    b.HasOne("WebApplication2.Models.Adres", "AdresDoKorespondencji")
                        .WithOne()
                        .HasForeignKey("WebApplication2.Models.Wniosek", "AdresDoKorespondencjiID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.Adres", "AdresZameldowania")
                        .WithOne()
                        .HasForeignKey("WebApplication2.Models.Wniosek", "AdresZameldowaniaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.StatusWniosku", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication2.Models.WymaganeWyposazenieDyscyplina", b =>
                {
                    b.HasOne("WebApplication2.Models.Dyscyplina")
                        .WithMany("WymaganeWyposazenie")
                        .HasForeignKey("DyscyplinaID");

                    b.HasOne("WebApplication2.Models.Wyposażenie", "WymaganeWyposazenie")
                        .WithMany()
                        .HasForeignKey("WymaganeWyposazenieID");
                });

            modelBuilder.Entity("WebApplication2.Models.Zajecia", b =>
                {
                    b.HasOne("WebApplication2.Models.Kurs", "Kurs")
                        .WithMany("Zajecia")
                        .HasForeignKey("KursKod")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication2.Models.Sala", "Sala")
                        .WithMany("Zajecia")
                        .HasForeignKey("SalaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication2.Models.Termin", "Termin")
                        .WithMany("Zajecia")
                        .HasForeignKey("TerminDzien", "TerminGodzinaRozpoczecia")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication2.Models.CzlonekKlubu", b =>
                {
                    b.HasOne("WebApplication2.Models.Wniosek", "WniosekPrzyjetyNaPodstawie")
                        .WithOne("CzlonekKlubuPrzyjetyNaPodstawie")
                        .HasForeignKey("WebApplication2.Models.CzlonekKlubu", "WniosekPrzyjetyNaPodstawiePesel")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
