// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;
using WebApplication4.Models;

namespace WebApplication4.Migrations
{
    [DbContext(typeof(Testowy03Context))]
    [Migration("20180618075511_UMLToEFConverterMigration_ff0f35df-4fae-4588-855f-1a9d573035c8")]
    partial class UMLToEFConverterMigration_ff0f35df4fae4588855f1a9d573035c8
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication4.Models.Ankieta", b =>
                {
                    b.Property<long>("Numer");

                    b.Property<string>("EksperymentIdentyfikator")
                        .IsRequired();

                    b.Property<bool>("PrzekroczonyCzasBadania");

                    b.Property<DateTime>("TerminRozpoczecia");

                    b.Property<DateTime>("TerminZakonczenia");

                    b.HasKey("Numer");

                    b.HasIndex("EksperymentIdentyfikator");

                    b.ToTable("AnkietaSet");
                });

            modelBuilder.Entity("WebApplication4.Models.BadaneEmocjeEksperyment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BadaneEmocjeID");

                    b.Property<string>("EksperymentIdentyfikator")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("BadaneEmocjeID");

                    b.HasIndex("EksperymentIdentyfikator");

                    b.ToTable("BadaneEmocjeEksperymentSet");
                });

            modelBuilder.Entity("WebApplication4.Models.Eksperyment", b =>
                {
                    b.Property<string>("Identyfikator");

                    b.Property<DateTime>("DataRozpoczecia");

                    b.Property<DateTime>("DataZakonczenia");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<long>("LiczbaJednostekWZestawie");

                    b.Property<int>("MaksymalnyCzasBadania");

                    b.Property<int>("MaksymalnyCzasPojedynczejOdpowiedzi");

                    b.Property<string>("Nazwa")
                        .IsRequired();

                    b.Property<int?>("SkalaEmocjiID")
                        .IsRequired();

                    b.Property<string>("SlownikNazwa")
                        .IsRequired();

                    b.Property<int>("TrybID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<int>("WidokEmocjiID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<long>("WymaganePokrycie");

                    b.HasKey("Identyfikator");

                    b.HasIndex("SkalaEmocjiID");

                    b.HasIndex("SlownikNazwa");

                    b.HasIndex("TrybID");

                    b.HasIndex("WidokEmocjiID");

                    b.ToTable("EksperymentSet");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Eksperyment");
                });

            modelBuilder.Entity("WebApplication4.Models.JednostkaLeksykalna", b =>
                {
                    b.Property<int>("IdentyfikatorWordNet");

                    b.Property<string>("Lemat")
                        .IsRequired();

                    b.HasKey("IdentyfikatorWordNet");

                    b.ToTable("JednostkaLeksykalnaSet");
                });

            modelBuilder.Entity("WebApplication4.Models.JednostkaWSlowniku", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("JednostkaLeksykalnaIdentyfikatorWordNet");

                    b.Property<long>("NrPorzadkowy");

                    b.HasKey("ID");

                    b.HasIndex("JednostkaLeksykalnaIdentyfikatorWordNet");

                    b.ToTable("JednostkaWSlownikuSet");
                });

            modelBuilder.Entity("WebApplication4.Models.Ocena", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("WybranaWartoscWartosc");

                    b.HasKey("ID");

                    b.HasIndex("WybranaWartoscWartosc");

                    b.ToTable("OcenaSet");
                });

            modelBuilder.Entity("WebApplication4.Models.Odpowiedz", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AnkietaNumer");

                    b.Property<int>("CzasOdpowiedzi");

                    b.Property<int>("JednostkaLeksykalnaIdentyfikatorWordNet");

                    b.Property<bool>("Kompletna");

                    b.Property<int>("NumerPorzadkowy");

                    b.Property<int?>("PrzedmiotBadaniaOcenaID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("AnkietaNumer");

                    b.HasIndex("JednostkaLeksykalnaIdentyfikatorWordNet");

                    b.HasIndex("PrzedmiotBadaniaOcenaID")
                        .IsUnique();

                    b.ToTable("OdpowiedzSet");
                });

            modelBuilder.Entity("WebApplication4.Models.Pozycja", b =>
                {
                    b.Property<int>("Wartosc");

                    b.Property<int?>("SkalaID")
                        .IsRequired();

                    b.HasKey("Wartosc");

                    b.HasIndex("SkalaID");

                    b.ToTable("PozycjaSet");
                });

            modelBuilder.Entity("WebApplication4.Models.PrzedmiotBadania", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Nazwa")
                        .IsRequired();

                    b.Property<int?>("OdpowiedzOcenaID")
                        .IsRequired();

                    b.Property<string>("Opis")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("OdpowiedzOcenaID")
                        .IsUnique();

                    b.ToTable("PrzedmiotBadaniaSet");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PrzedmiotBadania");
                });

            modelBuilder.Entity("WebApplication4.Models.PrzykladUzyc", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("JednostkaLeksykalnaIdentyfikatorWordNet");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("JednostkaLeksykalnaIdentyfikatorWordNet");

                    b.ToTable("PrzykladUzycSet");
                });

            modelBuilder.Entity("WebApplication4.Models.Skala", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nazwa")
                        .IsRequired();

                    b.Property<int>("WartoscOd");

                    b.Property<long>("Wielkosc");

                    b.HasKey("ID");

                    b.ToTable("SkalaSet");
                });

            modelBuilder.Entity("WebApplication4.Models.Slownik", b =>
                {
                    b.Property<string>("Nazwa");

                    b.Property<DateTime>("DataUtworzenia");

                    b.Property<int?>("JednostkiID")
                        .IsRequired();

                    b.HasKey("Nazwa");

                    b.HasIndex("JednostkiID")
                        .IsUnique();

                    b.ToTable("SlownikSet");
                });

            modelBuilder.Entity("WebApplication4.Models.Tryb", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("TrybSet");
                });

            modelBuilder.Entity("WebApplication4.Models.Widok", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("WidokSet");
                });

            modelBuilder.Entity("WebApplication4.Models.WymiarWBadaniu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EksperymentIdentyfikator")
                        .IsRequired();

                    b.Property<int?>("SkalaID")
                        .IsRequired();

                    b.Property<int?>("WymiarID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("EksperymentIdentyfikator");

                    b.HasIndex("SkalaID");

                    b.HasIndex("WymiarID");

                    b.ToTable("WymiarWBadaniuSet");
                });

            modelBuilder.Entity("WebApplication4.Models.ZestawTreningowySlownik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SlownikNazwa");

                    b.Property<int>("ZestawTreningowyIdentyfikatorWordNet");

                    b.HasKey("ID");

                    b.HasIndex("SlownikNazwa");

                    b.HasIndex("ZestawTreningowyIdentyfikatorWordNet");

                    b.ToTable("ZestawTreningowySlownikSet");
                });

            modelBuilder.Entity("WebApplication4.Models.EksperymentLokalny", b =>
                {
                    b.HasBaseType("WebApplication4.Models.Eksperyment");


                    b.ToTable("EksperymentLokalny");

                    b.HasDiscriminator().HasValue("EksperymentLokalny");
                });

            modelBuilder.Entity("WebApplication4.Models.Emocja", b =>
                {
                    b.HasBaseType("WebApplication4.Models.PrzedmiotBadania");


                    b.ToTable("Emocja");

                    b.HasDiscriminator().HasValue("Emocja");
                });

            modelBuilder.Entity("WebApplication4.Models.Wymiar", b =>
                {
                    b.HasBaseType("WebApplication4.Models.PrzedmiotBadania");

                    b.Property<string>("ZakresDo")
                        .IsRequired();

                    b.Property<string>("ZakresOd")
                        .IsRequired();

                    b.ToTable("Wymiar");

                    b.HasDiscriminator().HasValue("Wymiar");
                });

            modelBuilder.Entity("WebApplication4.Models.EmocjaPodstawowa", b =>
                {
                    b.HasBaseType("WebApplication4.Models.Emocja");

                    b.Property<string>("EksperymentLokalnyIdentyfikator")
                        .IsRequired();

                    b.Property<bool>("ZModeluPK");

                    b.HasIndex("EksperymentLokalnyIdentyfikator");

                    b.ToTable("EmocjaPodstawowa");

                    b.HasDiscriminator().HasValue("EmocjaPodstawowa");
                });

            modelBuilder.Entity("WebApplication4.Models.Ankieta", b =>
                {
                    b.HasOne("WebApplication4.Models.Eksperyment", "Eksperyment")
                        .WithMany("Ankiety")
                        .HasForeignKey("EksperymentIdentyfikator")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication4.Models.BadaneEmocjeEksperyment", b =>
                {
                    b.HasOne("WebApplication4.Models.Emocja", "BadaneEmocje")
                        .WithMany("Eksperyment")
                        .HasForeignKey("BadaneEmocjeID");

                    b.HasOne("WebApplication4.Models.Eksperyment", "Eksperyment")
                        .WithMany("BadaneEmocje")
                        .HasForeignKey("EksperymentIdentyfikator")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication4.Models.Eksperyment", b =>
                {
                    b.HasOne("WebApplication4.Models.Skala", "SkalaEmocji")
                        .WithMany()
                        .HasForeignKey("SkalaEmocjiID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication4.Models.Slownik", "Slownik")
                        .WithMany("Eksperymenty")
                        .HasForeignKey("SlownikNazwa")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication4.Models.Tryb", "Tryb")
                        .WithMany()
                        .HasForeignKey("TrybID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication4.Models.Widok", "WidokEmocji")
                        .WithMany()
                        .HasForeignKey("WidokEmocjiID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication4.Models.JednostkaWSlowniku", b =>
                {
                    b.HasOne("WebApplication4.Models.JednostkaLeksykalna", "JednostkaLeksykalna")
                        .WithMany("Slowniki")
                        .HasForeignKey("JednostkaLeksykalnaIdentyfikatorWordNet")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication4.Models.Ocena", b =>
                {
                    b.HasOne("WebApplication4.Models.Pozycja", "WybranaWartosc")
                        .WithMany()
                        .HasForeignKey("WybranaWartoscWartosc")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication4.Models.Odpowiedz", b =>
                {
                    b.HasOne("WebApplication4.Models.Ankieta", "Ankieta")
                        .WithMany("Jednostki")
                        .HasForeignKey("AnkietaNumer")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication4.Models.JednostkaLeksykalna", "JednostkaLeksykalna")
                        .WithMany("Ankiety")
                        .HasForeignKey("JednostkaLeksykalnaIdentyfikatorWordNet")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication4.Models.Ocena", "PrzedmiotBadaniaOcena")
                        .WithOne("Odpowiedz")
                        .HasForeignKey("WebApplication4.Models.Odpowiedz", "PrzedmiotBadaniaOcenaID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication4.Models.Pozycja", b =>
                {
                    b.HasOne("WebApplication4.Models.Skala", "Skala")
                        .WithMany("Pozycje")
                        .HasForeignKey("SkalaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication4.Models.PrzedmiotBadania", b =>
                {
                    b.HasOne("WebApplication4.Models.Ocena", "OdpowiedzOcena")
                        .WithOne("PrzedmiotBadania")
                        .HasForeignKey("WebApplication4.Models.PrzedmiotBadania", "OdpowiedzOcenaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("WebApplication4.Models.Obraz", "Ikona", b1 =>
                        {
                            b1.Property<int>("PrzedmiotBadaniaID");

                            b1.ToTable("PrzedmiotBadaniaSet");

                            b1.HasOne("WebApplication4.Models.PrzedmiotBadania")
                                .WithOne("Ikona")
                                .HasForeignKey("WebApplication4.Models.Obraz", "PrzedmiotBadaniaID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WebApplication4.Models.PrzykladUzyc", b =>
                {
                    b.HasOne("WebApplication4.Models.JednostkaLeksykalna")
                        .WithMany("PrzykladUzyc")
                        .HasForeignKey("JednostkaLeksykalnaIdentyfikatorWordNet");
                });

            modelBuilder.Entity("WebApplication4.Models.Slownik", b =>
                {
                    b.HasOne("WebApplication4.Models.JednostkaWSlowniku", "Jednostki")
                        .WithOne("Slownik")
                        .HasForeignKey("WebApplication4.Models.Slownik", "JednostkiID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication4.Models.WymiarWBadaniu", b =>
                {
                    b.HasOne("WebApplication4.Models.Eksperyment", "Eksperyment")
                        .WithMany("BadaneWymiary")
                        .HasForeignKey("EksperymentIdentyfikator")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication4.Models.Skala", "Skala")
                        .WithMany()
                        .HasForeignKey("SkalaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication4.Models.Wymiar", "Wymiar")
                        .WithMany("EksperymentWymiarWBadaniu")
                        .HasForeignKey("WymiarID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication4.Models.ZestawTreningowySlownik", b =>
                {
                    b.HasOne("WebApplication4.Models.Slownik")
                        .WithMany("ZestawTreningowy")
                        .HasForeignKey("SlownikNazwa");

                    b.HasOne("WebApplication4.Models.JednostkaLeksykalna", "ZestawTreningowy")
                        .WithMany()
                        .HasForeignKey("ZestawTreningowyIdentyfikatorWordNet")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication4.Models.EmocjaPodstawowa", b =>
                {
                    b.HasOne("WebApplication4.Models.EksperymentLokalny", "EksperymentLokalny")
                        .WithMany("EmocjaPodstawowa")
                        .HasForeignKey("EksperymentLokalnyIdentyfikator")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
