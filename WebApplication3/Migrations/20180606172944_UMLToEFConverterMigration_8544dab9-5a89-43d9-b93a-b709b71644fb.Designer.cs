// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;
using WebApplication3.Models;

namespace WebApplication3.Migrations
{
    [DbContext(typeof(Testowy02Context))]
    [Migration("20180606172944_UMLToEFConverterMigration_8544dab9-5a89-43d9-b93a-b709b71644fb")]
    partial class UMLToEFConverterMigration_8544dab95a8943d9b93ab709b71644fb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication3.Models.Autor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DaneAdresoweID")
                        .IsRequired();

                    b.Property<DateTime>("DataUrodzenia");

                    b.Property<string>("Imie")
                        .IsRequired();

                    b.Property<bool>("Korespondent");

                    b.Property<string>("Nazwisko")
                        .IsRequired();

                    b.Property<string>("Pesel");

                    b.HasKey("ID");

                    b.HasIndex("DaneAdresoweID")
                        .IsUnique();

                    b.ToTable("Autor");
                });

            modelBuilder.Entity("WebApplication3.Models.AutorzyPraca", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AutorzyID");

                    b.Property<int>("PracaNumer");

                    b.HasKey("ID");

                    b.HasIndex("AutorzyID");

                    b.HasIndex("PracaNumer");

                    b.ToTable("AutorzyPraca");
                });

            modelBuilder.Entity("WebApplication3.Models.DaneAdresowe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("KodPocztowy")
                        .IsRequired();

                    b.Property<string>("Miejscowosc")
                        .IsRequired();

                    b.Property<string>("Numer")
                        .IsRequired();

                    b.Property<string>("Telefon")
                        .IsRequired();

                    b.Property<string>("Ulica");

                    b.HasKey("ID");

                    b.ToTable("DaneAdresowe");
                });

            modelBuilder.Entity("WebApplication3.Models.EdycjaKonkursu", b =>
                {
                    b.Property<int>("Numer");

                    b.Property<DateTime?>("PlanowanaDataOpracowaniaRecenzji");

                    b.Property<DateTime?>("PlanowanaDataRozstrzygnieciaKonkursu");

                    b.Property<int>("Rok");

                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<int>("WymaganeMinimum");

                    b.HasKey("Numer");

                    b.HasIndex("StatusID");

                    b.ToTable("EdycjaKonkursu");
                });

            modelBuilder.Entity("WebApplication3.Models.Ekspert", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Imie")
                        .IsRequired();

                    b.Property<string>("Nazwisko")
                        .IsRequired();

                    b.Property<string>("Plec")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Ekspert");
                });

            modelBuilder.Entity("WebApplication3.Models.JednostkaOrganizacyjna", b =>
                {
                    b.Property<string>("NazwaKwalifikowana");

                    b.Property<int?>("DaneAdresoweID")
                        .IsRequired();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Nazwa")
                        .IsRequired();

                    b.Property<int>("TypID");

                    b.HasKey("NazwaKwalifikowana");

                    b.HasIndex("DaneAdresoweID")
                        .IsUnique();

                    b.HasIndex("TypID");

                    b.ToTable("JednostkaOrganizacyjna");

                    b.HasDiscriminator<string>("Discriminator").HasValue("JednostkaOrganizacyjna");
                });

            modelBuilder.Entity("WebApplication3.Models.Nagroda", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EdycjaKonkursuPrzydzielanaWRamachNumer");

                    b.Property<string>("Rodzaj")
                        .IsRequired();

                    b.Property<int>("Wartosc");

                    b.HasKey("ID");

                    b.HasIndex("EdycjaKonkursuPrzydzielanaWRamachNumer");

                    b.ToTable("Nagroda");
                });

            modelBuilder.Entity("WebApplication3.Models.ObszarBadan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EkspertID");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("EkspertID");

                    b.ToTable("ObszarBadan");
                });

            modelBuilder.Entity("WebApplication3.Models.Propozycja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DataPrzeslaniaProsby");

                    b.Property<int?>("EkspertID")
                        .IsRequired();

                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<int>("ZgloszeniePracyNumer");

                    b.HasKey("ID");

                    b.HasIndex("EkspertID");

                    b.HasIndex("StatusID");

                    b.HasIndex("ZgloszeniePracyNumer");

                    b.ToTable("Propozycja");
                });

            modelBuilder.Entity("WebApplication3.Models.Recenzent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EkspertID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("EkspertID")
                        .IsUnique();

                    b.ToTable("Recenzent");
                });

            modelBuilder.Entity("WebApplication3.Models.Recenzja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DataPrzeslaniaPonaglenia");

                    b.Property<DateTime?>("DataZatwierdzenia");

                    b.Property<string>("DodatkoweUwagi");

                    b.Property<int?>("Ocena");

                    b.Property<DateTime>("PlanowanaDataOpracowania");

                    b.Property<int?>("RecenzentID")
                        .IsRequired();

                    b.Property<int>("StatusID");

                    b.Property<int>("ZgloszeniePracyNumer");

                    b.HasKey("ID");

                    b.HasIndex("RecenzentID");

                    b.HasIndex("ZgloszeniePracyNumer");

                    b.ToTable("Recenzja");
                });

            modelBuilder.Entity("WebApplication3.Models.Skrot", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("JednostkaOrganizacyjnaNazwaKwalifikowana");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("JednostkaOrganizacyjnaNazwaKwalifikowana");

                    b.ToTable("Skrot");
                });

            modelBuilder.Entity("WebApplication3.Models.SlowaKluczowe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Value");

                    b.Property<int?>("ZgloszeniePracyNumer");

                    b.HasKey("ID");

                    b.HasIndex("ZgloszeniePracyNumer");

                    b.ToTable("SlowaKluczowe");
                });

            modelBuilder.Entity("WebApplication3.Models.StatusEdycji", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("StatusEdycji");
                });

            modelBuilder.Entity("WebApplication3.Models.StatusPropozycji", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("StatusPropozycji");
                });

            modelBuilder.Entity("WebApplication3.Models.StatusRecenzji", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("StatusRecenzji");
                });

            modelBuilder.Entity("WebApplication3.Models.StatusZatrudnienia", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Aktualne");

                    b.Property<int?>("EkspertID")
                        .IsRequired();

                    b.Property<string>("JednostkaOrganizacyjnaNazwaKwalifikowana")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("EkspertID");

                    b.HasIndex("JednostkaOrganizacyjnaNazwaKwalifikowana");

                    b.ToTable("StatusZatrudnienia");
                });

            modelBuilder.Entity("WebApplication3.Models.StatusZgloszenia", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("StatusZgloszenia");
                });

            modelBuilder.Entity("WebApplication3.Models.Telefon", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EkspertID");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("EkspertID");

                    b.ToTable("Telefon");
                });

            modelBuilder.Entity("WebApplication3.Models.TypJednostkiOrganizacyjnej", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("TypJednostkiOrganizacyjnej");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TypJednostkiOrganizacyjnej");
                });

            modelBuilder.Entity("WebApplication3.Models.ZgloszeniePracy", b =>
                {
                    b.Property<int>("Numer");

                    b.Property<DateTime>("DataObrony");

                    b.Property<DateTime?>("DataPrzekazaniaInformacjiOOdrzuceniu");

                    b.Property<DateTime>("DataZgloszenia");

                    b.Property<int>("EdycjaNumer");

                    b.Property<string>("ElementyUzyteczneDlaNaukiPraktyki")
                        .IsRequired();

                    b.Property<string>("KierunekDalszychPrac")
                        .IsRequired();

                    b.Property<int?>("NagrodaID");

                    b.Property<string>("NajwiekszeOsiagnieciaWlasneWPracy")
                        .IsRequired();

                    b.Property<string>("ObszarBadan")
                        .IsRequired();

                    b.Property<string>("PowodOdrzucenia");

                    b.Property<int?>("PromotorID")
                        .IsRequired();

                    b.Property<double>("SredniaOcenaKomisji");

                    b.Property<double>("SredniaOcenaRecenzentow");

                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.Property<string>("Tytul")
                        .IsRequired();

                    b.Property<string>("UczelniaNazwaKwalifikowana")
                        .IsRequired();

                    b.HasKey("Numer");

                    b.HasIndex("EdycjaNumer");

                    b.HasIndex("NagrodaID");

                    b.HasIndex("PromotorID");

                    b.HasIndex("StatusID");

                    b.HasIndex("UczelniaNazwaKwalifikowana");

                    b.ToTable("ZgloszeniePracy");
                });

            modelBuilder.Entity("WebApplication3.Models.JednostkaNaukowa", b =>
                {
                    b.HasBaseType("WebApplication3.Models.JednostkaOrganizacyjna");

                    b.Property<string>("NadrzednaNazwaKwalifikowana");

                    b.HasIndex("NadrzednaNazwaKwalifikowana");

                    b.ToTable("JednostkaNaukowa");

                    b.HasDiscriminator().HasValue("JednostkaNaukowa");
                });

            modelBuilder.Entity("WebApplication3.Models.TypJednostki", b =>
                {
                    b.HasBaseType("WebApplication3.Models.TypJednostkiOrganizacyjnej");


                    b.ToTable("TypJednostki");

                    b.HasDiscriminator().HasValue("TypJednostki");
                });

            modelBuilder.Entity("WebApplication3.Models.Autor", b =>
                {
                    b.HasOne("WebApplication3.Models.DaneAdresowe", "DaneAdresowe")
                        .WithOne()
                        .HasForeignKey("WebApplication3.Models.Autor", "DaneAdresoweID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication3.Models.AutorzyPraca", b =>
                {
                    b.HasOne("WebApplication3.Models.Autor", "Autorzy")
                        .WithMany("Praca")
                        .HasForeignKey("AutorzyID");

                    b.HasOne("WebApplication3.Models.ZgloszeniePracy", "Praca")
                        .WithMany("Autorzy")
                        .HasForeignKey("PracaNumer")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication3.Models.EdycjaKonkursu", b =>
                {
                    b.HasOne("WebApplication3.Models.StatusEdycji", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication3.Models.JednostkaOrganizacyjna", b =>
                {
                    b.HasOne("WebApplication3.Models.DaneAdresowe", "DaneAdresowe")
                        .WithOne()
                        .HasForeignKey("WebApplication3.Models.JednostkaOrganizacyjna", "DaneAdresoweID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication3.Models.TypJednostkiOrganizacyjnej", "Typ")
                        .WithMany()
                        .HasForeignKey("TypID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication3.Models.Nagroda", b =>
                {
                    b.HasOne("WebApplication3.Models.EdycjaKonkursu", "EdycjaKonkursuPrzydzielanaWRamach")
                        .WithMany("Nagrody")
                        .HasForeignKey("EdycjaKonkursuPrzydzielanaWRamachNumer")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication3.Models.ObszarBadan", b =>
                {
                    b.HasOne("WebApplication3.Models.Ekspert")
                        .WithMany("ObszarBadan")
                        .HasForeignKey("EkspertID");
                });

            modelBuilder.Entity("WebApplication3.Models.Propozycja", b =>
                {
                    b.HasOne("WebApplication3.Models.Ekspert", "Ekspert")
                        .WithMany("ProponowanePrace")
                        .HasForeignKey("EkspertID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication3.Models.StatusPropozycji", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication3.Models.ZgloszeniePracy", "ZgloszeniePracy")
                        .WithMany("ProponowaniRecenzenci")
                        .HasForeignKey("ZgloszeniePracyNumer")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication3.Models.Recenzent", b =>
                {
                    b.HasOne("WebApplication3.Models.Ekspert", "Ekspert")
                        .WithOne("Konto")
                        .HasForeignKey("WebApplication3.Models.Recenzent", "EkspertID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication3.Models.Recenzja", b =>
                {
                    b.HasOne("WebApplication3.Models.Recenzent", "Recenzent")
                        .WithMany("OpiniowanePrace")
                        .HasForeignKey("RecenzentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication3.Models.ZgloszeniePracy", "ZgloszeniePracy")
                        .WithMany("Recenzenci")
                        .HasForeignKey("ZgloszeniePracyNumer")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication3.Models.Skrot", b =>
                {
                    b.HasOne("WebApplication3.Models.JednostkaOrganizacyjna")
                        .WithMany("Skrot")
                        .HasForeignKey("JednostkaOrganizacyjnaNazwaKwalifikowana");
                });

            modelBuilder.Entity("WebApplication3.Models.SlowaKluczowe", b =>
                {
                    b.HasOne("WebApplication3.Models.ZgloszeniePracy")
                        .WithMany("SlowaKluczowe")
                        .HasForeignKey("ZgloszeniePracyNumer");
                });

            modelBuilder.Entity("WebApplication3.Models.StatusZatrudnienia", b =>
                {
                    b.HasOne("WebApplication3.Models.Ekspert", "Ekspert")
                        .WithMany("Zatrudnienia")
                        .HasForeignKey("EkspertID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication3.Models.JednostkaOrganizacyjna", "JednostkaOrganizacyjna")
                        .WithMany("EkspertStatusZatrudnienia")
                        .HasForeignKey("JednostkaOrganizacyjnaNazwaKwalifikowana")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication3.Models.Telefon", b =>
                {
                    b.HasOne("WebApplication3.Models.Ekspert")
                        .WithMany("Telefon")
                        .HasForeignKey("EkspertID");
                });

            modelBuilder.Entity("WebApplication3.Models.ZgloszeniePracy", b =>
                {
                    b.HasOne("WebApplication3.Models.EdycjaKonkursu", "Edycja")
                        .WithMany("ZgloszonePrace")
                        .HasForeignKey("EdycjaNumer")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication3.Models.Nagroda", "Nagroda")
                        .WithMany("Prace")
                        .HasForeignKey("NagrodaID");

                    b.HasOne("WebApplication3.Models.Ekspert", "Promotor")
                        .WithMany("NadzorowanePrace")
                        .HasForeignKey("PromotorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication3.Models.StatusZgloszenia", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication3.Models.JednostkaNaukowa", "Uczelnia")
                        .WithMany("Praca")
                        .HasForeignKey("UczelniaNazwaKwalifikowana")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication3.Models.JednostkaNaukowa", b =>
                {
                    b.HasOne("WebApplication3.Models.JednostkaNaukowa", "Nadrzedna")
                        .WithMany("JednostkaNaukowaPodjednostki")
                        .HasForeignKey("NadrzednaNazwaKwalifikowana");
                });
#pragma warning restore 612, 618
        }
    }
}
