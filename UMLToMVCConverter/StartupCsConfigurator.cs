namespace UMLToMVCConverter
{
    using System;
    using System.IO;
    using System.Text;
    using UMLToMVCConverter.ExtensionMethods;

    public class StartupCsConfigurator
    {
        private const string AutogeneratedCodeBeginningMarker = "\t\t// UMLToMVCConverter auto-generated code BEGIN";
        private const string AutogeneratedCodeEndingMarker = "\t\t// UMLToMVCConverter auto-generated code END";

        public static void SetUpStartupCsDbContextUse(string contextName, string mvcProjectPath)
        {
            var startupCsPath = Path.Combine(mvcProjectPath, "Startup.cs");

            var startupCsContent = File.ReadAllText(startupCsPath);

            var startupCsCleared = ClearFile(startupCsContent);

            var outputStartupCsFileBuilder = new StringBuilder();

            var distanceFromLineToInsert = int.MaxValue;
            foreach (var line in startupCsCleared.AsArrayOfLines())
            {
                distanceFromLineToInsert--;
                if (line.Contains("public void ConfigureServices(IServiceCollection services)"))
                {
                    distanceFromLineToInsert = 2;
                }

                if (distanceFromLineToInsert == 0)
                {
                    outputStartupCsFileBuilder.AppendLine(AutogeneratedCodeBeginningMarker);
                    outputStartupCsFileBuilder.AppendLine($"\t\t\tservices.AddDbContext<{contextName}>(");
                    outputStartupCsFileBuilder.AppendLine("\t\t\t\toptions =>");
                    outputStartupCsFileBuilder.AppendLine($"\t\t\t\t\toptions.UseSqlServer(this.Configuration.GetConnectionString(\"{contextName}\")));");
                    outputStartupCsFileBuilder.AppendLine(AutogeneratedCodeEndingMarker);
                }

                outputStartupCsFileBuilder.AppendLine(line);
            }

            File.WriteAllText(startupCsPath, outputStartupCsFileBuilder.ToString());
        }

        private static string ClearFile(string startupCsContent)
        {
            var output = new StringBuilder();
            var ignoring = false;
            var lines = startupCsContent.AsArrayOfLines();
            foreach (var line in lines)
            {
                if (line.Contains(AutogeneratedCodeBeginningMarker))
                {
                    ignoring = true;
                }

                if (!ignoring)
                {
                    output.AppendLine(line);
                }

                if (line.Contains(AutogeneratedCodeEndingMarker))
                {
                    ignoring = false;
                }
            }

            return output.ToString();
        }
    }
}
