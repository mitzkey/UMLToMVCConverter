<#@ template language="C#"#>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="UMLToMVCConverter"#>
<#@ import namespace="UMLToMVCConverter.Domain.Models"#>
<#@ import namespace="UMLToMVCConverter.Common"#>
<#@ import namespace="Autofac"#>
<#@ assembly name="System.Core"#>
	public<#

if(this.codeTypeDeclaration.IsAbstract) {
	#> abstract<#
}

#> class <#=this.codeTypeDeclaration.Name#> <#

if(this.codeTypeDeclaration.BaseClassName != null) {
	#>: <#= this.codeTypeDeclaration.BaseClassName#> <#
}

#>{

<#
if(this.codeTypeDeclaration.IsEnum) {
#>		[DatabaseGenerated(DatabaseGeneratedOption.None)]<#
}
if((this.codeTypeDeclaration.IsClass 
	|| this.codeTypeDeclaration.IsEnum)
	&& string.IsNullOrWhiteSpace(this.codeTypeDeclaration.BaseClassName)
	&& !this.codeTypeDeclaration.HasKey) {
	#>

		public int ID {get; set;}<#
}

foreach (var foreignKey in this.codeTypeDeclaration.ForeignKeys) {
	var type = (ExtendedCodeTypeReference)foreignKey.Value.Type;
	#>

		public <#= type.ExtTypeName + " " + foreignKey.Key #> { get; set; }<#
}

foreach (var cm in this.codeTypeDeclaration.Members) {

	if (cm is CodeTypeDeclaration) {
		var ctd = (ExtendedCodeTypeDeclaration) cm;
		var tmpl = this.componentContext.Resolve<IBasicTypeTextTemplate>();
		string innerClass = tmpl.TransformText(ctd);
		#><#=innerClass.AddNewLines(2).NewSection().NewSection()#><#
	}
	else if (cm is CodeMemberProperty) {
		var cmp = (ExtendedCodeMemberProperty) cm;
		string generics = "";
		var type = cmp.ExtendedTypeReference;
		#>


		<#
		if (!this.codeTypeDeclaration.HasComplexKey && cmp.IsID) {
			#>[Key]
		<#						
		}
		#>public <#
		if (cmp.IsStatic) {
			#>static <#
		}
        if (type.ExtType.IsCollection || cmp.IsVirtual) {
			#>virtual <#
		}
		#><#= type.ExtTypeName + " " + cmp.Name #> { get<#
		if (cmp.IsDerived) {
			#> { throw new NotImplementedException(); } <#
		}
		else {
			#>; <#
		}
		if (cmp.HasSet) {
			#>set; <#
		}
		#>}<#
		if (cmp.HasDefaultValueString) {
			#> = <#=cmp.DefaultValueString#>;<#
		}
		if (cmp.IsReferencingEnumType) {
			#>
		

		[ForeignKey("<#=type.ExtTypeName#>")]
        public int <#=cmp.Name#>ID { get; set; }
		<#
		}
	}
}
foreach (var method in this.codeTypeDeclaration.Methods) {
	string returnTypeName = "void";
	if (method.ReturnType.BaseType != "System.Void") {
		returnTypeName = ((ExtendedCodeTypeReference)method.ReturnType).ExtTypeName;
	}
	#>


		public<#
	if (method.IsStatic) {
		#> static<#
	}
	#> <#=returnTypeName#> <#=method.Name#>(<#
	bool addComma = false;
	foreach (var parameter in method.Parameters) {
		if (addComma) {
		#>,<#
		}
		addComma = true;
		#><#= parameter.ExtTypeName + " " + parameter.Name#><#
	}
		#>) {
			throw new NotImplementedException();
		}<#
}
#>

	}