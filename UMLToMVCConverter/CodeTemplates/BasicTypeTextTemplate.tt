<#@ template language="C#"#>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="UMLToMVCConverter"#>
<#@ import namespace="UMLToMVCConverter.ExtendedTypes"#>
<#@ assembly name="System.Core"#>
<#
if(_class.IsStruct) {
	#>	[ComplexType]
<#
}

#>	public<#

if(isAbstract) {
	#> abstract<#
}

#> class <#=_class.Name#> <#

if(baseClassName != null) {
	#>: <#= baseClassName#> <#
}

#>{<#

if(_class.IsClass && string.IsNullOrWhiteSpace(baseClassName)) {
	#>


		public int ID {get; set;}<#
}

foreach (var cm in _class.Members) {

	if (cm is CodeTypeDeclaration) {
		CodeTypeDeclaration ctd = (CodeTypeDeclaration) cm;
		BasicTypeTextTemplate tmpl = new BasicTypeTextTemplate(ctd, contextName);
		string inner_class = tmpl.TransformText();
		#><#=inner_class.AddNewLines(2).NewSection().NewSection()#><#
	}
	else if (cm is CodeMemberProperty) {
		var cmp = (ExtendedCodeMemberProperty) cm;
		string generics = "";
		ExtendedCodeTypeReference type = (ExtendedCodeTypeReference)cmp.Type;
		#>


		public <#
		if (cmp.Attributes.HasFlag(MemberAttributes.Static)) {
			#>static <#
		}
        if (type.ExtType.IsCollection) {
			#>virtual <#
		}
		#><#= type.ExtTypeName + " " + cmp.Name #> { get; <#
		if (!cmp.HasSet) {
			#>private <#
		}
		#>set; }<#
		if (cmp.HasDefaultValue) {
			#> = <#=cmp.DefaultValueString#>;<#
		}
	}
	else if (cm is CodeMemberMethod) {
		var codeMemberMethod = (CodeMemberMethod) cm;
		string returnTypeName = "void";
		if (codeMemberMethod.ReturnType.BaseType != "System.Void") {
			returnTypeName = ((ExtendedCodeTypeReference)codeMemberMethod.ReturnType).ExtTypeName;
		}
		#>


		public<#
		if (codeMemberMethod.Attributes.HasFlag(MemberAttributes.Static)) {
			#> static<#
		}
		#> <#=returnTypeName#> <#=codeMemberMethod.Name#>(<#
		bool addComma = false;
		foreach (ExtendedCodeParameterDeclarationExpression cp in codeMemberMethod.Parameters) {
			if (addComma) {
			#>,<#
			}
			addComma = true;
			#><#= cp.ExtTypeName + " " + cp.Name#><#
		}
		#>) {
			throw new NotImplementedException();
		}<#
	}
}
#>

	}