// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WebApplication1.Models;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20180523175201_UMLToMVCConverterMigration_fd1fe961-50ed-4404-af00-e01b9894f913")]
    partial class UMLToMVCConverterMigration_fd1fe96150ed4404af00e01b9894f913
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication1.Models.Baby", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Baby");
                });

            modelBuilder.Entity("WebApplication1.Models.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AuthorID");

                    b.Property<int?>("WriterID");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("WebApplication1.Models.BookWriter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BookID");

                    b.Property<int?>("WriterID");

                    b.HasKey("ID");

                    b.HasIndex("BookID");

                    b.HasIndex("WriterID");

                    b.ToTable("BookWriter");
                });

            modelBuilder.Entity("WebApplication1.Models.Car", b =>
                {
                    b.Property<string>("Brand");

                    b.Property<string>("Model");

                    b.Property<string>("Version");

                    b.HasKey("Brand", "Model", "Version");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("WebApplication1.Models.CarRadio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Producer");

                    b.Property<string>("RadiosCarBrand");

                    b.Property<string>("RadiosCarModel");

                    b.Property<string>("RadiosCarVersion");

                    b.HasKey("ID");

                    b.HasIndex("RadiosCarBrand", "RadiosCarModel", "RadiosCarVersion")
                        .IsUnique()
                        .HasFilter("[RadiosCarBrand] IS NOT NULL AND [RadiosCarModel] IS NOT NULL AND [RadiosCarVersion] IS NOT NULL");

                    b.ToTable("CarRadio");
                });

            modelBuilder.Entity("WebApplication1.Models.CompanyInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("CompanyInfo");
                });

            modelBuilder.Entity("WebApplication1.Models.Enterprise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyInfoID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("CompanyInfoID");

                    b.ToTable("Enterprise");
                });

            modelBuilder.Entity("WebApplication1.Models.FavouriteNumber", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Value");

                    b.Property<int?>("WorkerID");

                    b.HasKey("ID");

                    b.HasIndex("WorkerID");

                    b.ToTable("FavouriteNumber");
                });

            modelBuilder.Entity("WebApplication1.Models.KnownWords", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BabyID");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("BabyID");

                    b.ToTable("KnownWords");
                });

            modelBuilder.Entity("WebApplication1.Models.LineSegment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("LineSegment");
                });

            modelBuilder.Entity("WebApplication1.Models.Professor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FavouriteBookID");

                    b.HasKey("ID");

                    b.HasIndex("FavouriteBookID");

                    b.ToTable("Professor");
                });

            modelBuilder.Entity("WebApplication1.Models.Seat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CarBrand")
                        .IsRequired();

                    b.Property<string>("CarModel")
                        .IsRequired();

                    b.Property<string>("CarVersion")
                        .IsRequired();

                    b.Property<bool?>("LeatherMade");

                    b.HasKey("ID");

                    b.HasIndex("CarBrand", "CarModel", "CarVersion");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("WebApplication1.Models.StatusWniosku", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("StatusWniosku");
                });

            modelBuilder.Entity("WebApplication1.Models.SteeringWheel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CarBrand")
                        .IsRequired();

                    b.Property<string>("CarModel")
                        .IsRequired();

                    b.Property<string>("CarVersion")
                        .IsRequired();

                    b.Property<double?>("Perimeter");

                    b.HasKey("ID");

                    b.HasIndex("CarBrand", "CarModel", "CarVersion")
                        .IsUnique();

                    b.ToTable("SteeringWheel");
                });

            modelBuilder.Entity("WebApplication1.Models.Tire", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<string>("CarBrand");

                    b.Property<string>("CarModel");

                    b.Property<string>("CarVersion");

                    b.HasKey("ID");

                    b.HasIndex("CarBrand", "CarModel", "CarVersion");

                    b.ToTable("Tire");
                });

            modelBuilder.Entity("WebApplication1.Models.Wheel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("Wheel");
                });

            modelBuilder.Entity("WebApplication1.Models.WithSingleIDProperty", b =>
                {
                    b.Property<string>("MyIdentifier")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Another");

                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.HasKey("MyIdentifier");

                    b.HasIndex("StatusID");

                    b.ToTable("WithSingleIDProperty");
                });

            modelBuilder.Entity("WebApplication1.Models.Worker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Company");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<int?>("EnterpriseID");

                    b.Property<string>("Name");

                    b.Property<double?>("Wage");

                    b.Property<int?>("WorkerID");

                    b.HasKey("ID");

                    b.HasIndex("EnterpriseID");

                    b.HasIndex("WorkerID");

                    b.ToTable("Worker");
                });

            modelBuilder.Entity("WebApplication1.Models.Writer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BookID");

                    b.HasKey("ID");

                    b.ToTable("Writer");
                });

            modelBuilder.Entity("WebApplication1.Models.Book", b =>
                {
                    b.HasOne("WebApplication1.Models.Professor", "Author")
                        .WithMany("TextBook")
                        .HasForeignKey("AuthorID");
                });

            modelBuilder.Entity("WebApplication1.Models.BookWriter", b =>
                {
                    b.HasOne("WebApplication1.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID");

                    b.HasOne("WebApplication1.Models.Writer")
                        .WithMany("Book")
                        .HasForeignKey("BookID");

                    b.HasOne("WebApplication1.Models.Book")
                        .WithMany("Writer")
                        .HasForeignKey("WriterID");

                    b.HasOne("WebApplication1.Models.Writer", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterID");
                });

            modelBuilder.Entity("WebApplication1.Models.CarRadio", b =>
                {
                    b.HasOne("WebApplication1.Models.Car", "RadiosCar")
                        .WithOne("SuperRadio")
                        .HasForeignKey("WebApplication1.Models.CarRadio", "RadiosCarBrand", "RadiosCarModel", "RadiosCarVersion");
                });

            modelBuilder.Entity("WebApplication1.Models.Enterprise", b =>
                {
                    b.HasOne("WebApplication1.Models.CompanyInfo", "CompanyInfo")
                        .WithMany()
                        .HasForeignKey("CompanyInfoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.FavouriteNumber", b =>
                {
                    b.HasOne("WebApplication1.Models.Worker")
                        .WithMany("FavouriteNumber")
                        .HasForeignKey("WorkerID");
                });

            modelBuilder.Entity("WebApplication1.Models.KnownWords", b =>
                {
                    b.HasOne("WebApplication1.Models.Baby")
                        .WithMany("KnownWords")
                        .HasForeignKey("BabyID");
                });

            modelBuilder.Entity("WebApplication1.Models.LineSegment", b =>
                {
                    b.OwnsOne("WebApplication1.Models.Point", "X", b1 =>
                        {
                            b1.Property<int>("LineSegmentID");

                            b1.Property<int?>("X");

                            b1.Property<int?>("Y");

                            b1.ToTable("LineSegment");

                            b1.HasOne("WebApplication1.Models.LineSegment")
                                .WithOne("X")
                                .HasForeignKey("WebApplication1.Models.Point", "LineSegmentID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("WebApplication1.Models.Point", "Y", b1 =>
                        {
                            b1.Property<int?>("LineSegmentID");

                            b1.Property<int?>("X");

                            b1.Property<int?>("Y");

                            b1.ToTable("LineSegment");

                            b1.HasOne("WebApplication1.Models.LineSegment")
                                .WithOne("Y")
                                .HasForeignKey("WebApplication1.Models.Point", "LineSegmentID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Professor", b =>
                {
                    b.HasOne("WebApplication1.Models.Book", "FavouriteBook")
                        .WithMany("Fans")
                        .HasForeignKey("FavouriteBookID");
                });

            modelBuilder.Entity("WebApplication1.Models.Seat", b =>
                {
                    b.HasOne("WebApplication1.Models.Car", "Car")
                        .WithMany("Seat")
                        .HasForeignKey("CarBrand", "CarModel", "CarVersion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.SteeringWheel", b =>
                {
                    b.HasOne("WebApplication1.Models.Car", "Car")
                        .WithOne("SteeringWheel")
                        .HasForeignKey("WebApplication1.Models.SteeringWheel", "CarBrand", "CarModel", "CarVersion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Tire", b =>
                {
                    b.HasOne("WebApplication1.Models.Car", "Car")
                        .WithMany("Tire")
                        .HasForeignKey("CarBrand", "CarModel", "CarVersion");
                });

            modelBuilder.Entity("WebApplication1.Models.WithSingleIDProperty", b =>
                {
                    b.HasOne("WebApplication1.Models.StatusWniosku", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Worker", b =>
                {
                    b.HasOne("WebApplication1.Models.Enterprise", "Enterprise")
                        .WithMany("Worker")
                        .HasForeignKey("EnterpriseID");

                    b.HasOne("WebApplication1.Models.Worker")
                        .WithMany("Coworkers")
                        .HasForeignKey("WorkerID");
                });
#pragma warning restore 612, 618
        }
    }
}
