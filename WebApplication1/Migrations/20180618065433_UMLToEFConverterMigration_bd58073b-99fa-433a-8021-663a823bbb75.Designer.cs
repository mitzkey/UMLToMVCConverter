// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WebApplication1.Models;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(DefaultContext))]
    [Migration("20180618065433_UMLToEFConverterMigration_bd58073b-99fa-433a-8021-663a823bbb75")]
    partial class UMLToEFConverterMigration_bd58073b99fa433a8021663a823bbb75
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication1.Models.Baby", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("BabySet");
                });

            modelBuilder.Entity("WebApplication1.Models.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AuthorID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.ToTable("BookSet");
                });

            modelBuilder.Entity("WebApplication1.Models.BookWriter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BookID");

                    b.Property<int?>("WriterID");

                    b.HasKey("ID");

                    b.HasIndex("BookID");

                    b.HasIndex("WriterID");

                    b.ToTable("BookWriterSet");
                });

            modelBuilder.Entity("WebApplication1.Models.Car", b =>
                {
                    b.Property<string>("Brand");

                    b.Property<string>("Model");

                    b.Property<string>("Version");

                    b.HasKey("Brand", "Model", "Version");

                    b.ToTable("CarSet");
                });

            modelBuilder.Entity("WebApplication1.Models.CarRadio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Producer")
                        .IsRequired();

                    b.Property<string>("RadiosCarBrand")
                        .IsRequired();

                    b.Property<string>("RadiosCarModel")
                        .IsRequired();

                    b.Property<string>("RadiosCarVersion")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("RadiosCarBrand", "RadiosCarModel", "RadiosCarVersion")
                        .IsUnique();

                    b.ToTable("CarRadioSet");
                });

            modelBuilder.Entity("WebApplication1.Models.CompanyInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("CompanyInfoSet");
                });

            modelBuilder.Entity("WebApplication1.Models.Enterprise", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyInfoID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("CompanyInfoID");

                    b.ToTable("EnterpriseSet");
                });

            modelBuilder.Entity("WebApplication1.Models.FavouriteNumber", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Value");

                    b.Property<int?>("WorkerID");

                    b.HasKey("ID");

                    b.HasIndex("WorkerID");

                    b.ToTable("FavouriteNumberSet");
                });

            modelBuilder.Entity("WebApplication1.Models.KnownWords", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BabyID");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.HasIndex("BabyID");

                    b.ToTable("KnownWordsSet");
                });

            modelBuilder.Entity("WebApplication1.Models.LineSegment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("LineSegmentSet");
                });

            modelBuilder.Entity("WebApplication1.Models.Professor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FavouriteBookID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("FavouriteBookID");

                    b.ToTable("ProfessorSet");
                });

            modelBuilder.Entity("WebApplication1.Models.Seat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CarBrand")
                        .IsRequired();

                    b.Property<string>("CarModel")
                        .IsRequired();

                    b.Property<string>("CarVersion")
                        .IsRequired();

                    b.Property<bool>("LeatherMade");

                    b.HasKey("ID");

                    b.HasIndex("CarBrand", "CarModel", "CarVersion");

                    b.ToTable("SeatSet");
                });

            modelBuilder.Entity("WebApplication1.Models.StatusWniosku", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("StatusWnioskuSet");
                });

            modelBuilder.Entity("WebApplication1.Models.SteeringWheel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Perimeter");

                    b.HasKey("ID");

                    b.ToTable("SteeringWheelSet");
                });

            modelBuilder.Entity("WebApplication1.Models.Tire", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand")
                        .IsRequired();

                    b.Property<string>("CarBrand")
                        .IsRequired();

                    b.Property<string>("CarModel")
                        .IsRequired();

                    b.Property<string>("CarVersion")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("CarBrand", "CarModel", "CarVersion");

                    b.ToTable("TireSet");
                });

            modelBuilder.Entity("WebApplication1.Models.Wheel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("WheelSet");
                });

            modelBuilder.Entity("WebApplication1.Models.WithSingleIDProperty", b =>
                {
                    b.Property<string>("MyIdentifier");

                    b.Property<int>("Another");

                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("1");

                    b.HasKey("MyIdentifier");

                    b.HasIndex("StatusID");

                    b.ToTable("WithSingleIDPropertySet");
                });

            modelBuilder.Entity("WebApplication1.Models.Worker", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Company")
                        .IsRequired();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<int?>("EnterpriseID")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Wage");

                    b.Property<int?>("WorkerID");

                    b.HasKey("ID");

                    b.HasIndex("EnterpriseID");

                    b.HasIndex("WorkerID");

                    b.ToTable("WorkerSet");
                });

            modelBuilder.Entity("WebApplication1.Models.Writer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("WriterSet");
                });

            modelBuilder.Entity("WebApplication1.Models.Book", b =>
                {
                    b.HasOne("WebApplication1.Models.Professor", "Author")
                        .WithMany("TextBook")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication1.Models.BookWriter", b =>
                {
                    b.HasOne("WebApplication1.Models.Book", "Book")
                        .WithMany("Writer")
                        .HasForeignKey("BookID");

                    b.HasOne("WebApplication1.Models.Writer", "Writer")
                        .WithMany("Book")
                        .HasForeignKey("WriterID");
                });

            modelBuilder.Entity("WebApplication1.Models.CarRadio", b =>
                {
                    b.HasOne("WebApplication1.Models.Car", "RadiosCar")
                        .WithOne("SuperRadio")
                        .HasForeignKey("WebApplication1.Models.CarRadio", "RadiosCarBrand", "RadiosCarModel", "RadiosCarVersion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Enterprise", b =>
                {
                    b.HasOne("WebApplication1.Models.CompanyInfo", "CompanyInfo")
                        .WithMany()
                        .HasForeignKey("CompanyInfoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.FavouriteNumber", b =>
                {
                    b.HasOne("WebApplication1.Models.Worker")
                        .WithMany("FavouriteNumber")
                        .HasForeignKey("WorkerID");
                });

            modelBuilder.Entity("WebApplication1.Models.KnownWords", b =>
                {
                    b.HasOne("WebApplication1.Models.Baby")
                        .WithMany("KnownWords")
                        .HasForeignKey("BabyID");
                });

            modelBuilder.Entity("WebApplication1.Models.LineSegment", b =>
                {
                    b.OwnsOne("WebApplication1.Models.Point", "A", b1 =>
                        {
                            b1.Property<int>("LineSegmentID");

                            b1.Property<int>("X");

                            b1.Property<int>("Y");

                            b1.ToTable("LineSegmentSet");

                            b1.HasOne("WebApplication1.Models.LineSegment")
                                .WithOne("A")
                                .HasForeignKey("WebApplication1.Models.Point", "LineSegmentID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("WebApplication1.Models.Point", "B", b1 =>
                        {
                            b1.Property<int?>("LineSegmentID");

                            b1.Property<int>("X");

                            b1.Property<int>("Y");

                            b1.ToTable("LineSegmentSet");

                            b1.HasOne("WebApplication1.Models.LineSegment")
                                .WithOne("B")
                                .HasForeignKey("WebApplication1.Models.Point", "LineSegmentID")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WebApplication1.Models.Professor", b =>
                {
                    b.HasOne("WebApplication1.Models.Book", "FavouriteBook")
                        .WithMany()
                        .HasForeignKey("FavouriteBookID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("WebApplication1.Models.Seat", b =>
                {
                    b.HasOne("WebApplication1.Models.Car", "Car")
                        .WithMany("Seat")
                        .HasForeignKey("CarBrand", "CarModel", "CarVersion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Tire", b =>
                {
                    b.HasOne("WebApplication1.Models.Car", "Car")
                        .WithMany("Tire")
                        .HasForeignKey("CarBrand", "CarModel", "CarVersion")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.WithSingleIDProperty", b =>
                {
                    b.HasOne("WebApplication1.Models.StatusWniosku", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication1.Models.Worker", b =>
                {
                    b.HasOne("WebApplication1.Models.Enterprise", "Enterprise")
                        .WithMany("Worker")
                        .HasForeignKey("EnterpriseID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebApplication1.Models.Worker")
                        .WithMany("Coworkers")
                        .HasForeignKey("WorkerID");
                });
#pragma warning restore 612, 618
        }
    }
}
